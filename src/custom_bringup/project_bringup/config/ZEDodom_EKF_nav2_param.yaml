bt_navigator:
  ros__parameters:
    use_sim_time: false
    global_frame: map
    robot_base_frame: base_link
    odom_topic: <robot_namespace>/odom_converted
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    # navigators: ["navigate_to_pose", "navigate_through_poses"]
    # navigate_to_pose:
    #   plugin: "nav2_bt_navigator/NavigateToPoseNavigator"
    # navigate_through_poses:
    #   plugin: "nav2_bt_navigator/NavigateThroughPosesNavigator"
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node
      # - nav2_is_docked_condition_bt_node
      # - nav2_is_docking_condition_bt_node
      # - nav2_is_un_docked_condition_bt_node
      # - nav2_is_un_docking_condition_bt_node
      # - nav2_is_docking_recovery_condition_bt_node
      # - nav2_is_un_docking_recovery_condition_bt_node
      # - nav2_is_docked_recovery_condition_bt_node
      # - nav2_is_un_docked_recovery_condition_bt_node
      # - nav2_is_docking_recovery_action_bt_node
      # - nav2_is_un_docking_recovery_action_bt_node
      # - nav2_is_docked_recovery_action_bt_node
      # - nav2_is_un_docked_recovery_action_bt_node
      # - nav2_dock_bt_node
      # - nav2_undock_bt_node
      # - nav2_dock_recovery_bt_node
      # - nav2_undock_recovery_bt_node
      # - nav2_dock_recovery_action_bt_node
      # - nav2_undock_recovery_action_bt_node
      # - nav2_dock_action_bt_node
      # - nav2_undock_action_bt_node
      # - nav2_dock_recovery_action_bt_node
      # - nav2_undock_recovery_action_bt_node
      # - nav2_dock_recovery_bt_node
      # - nav2_undock_recovery_bt_node      
    # error_code_names:
    #   - compute_path_error_code
    #   - follow_path_error_code

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: false

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    controller_frequency: 15.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["goal_checker"]
    controller_plugins: ["FollowPath"]
    odom_topic: <robot_namespace>/odom_converted

    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.2
      movement_time_allowance: 20.0
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.1    # in meters
      yaw_goal_tolerance: 0.1   # appx. 5.7 degrees
      stateful: True
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"      
      time_steps: 30
      model_dt: 0.1   #Length of each time stepâ€™s dt timestep, in seconds. time_steps * model_dt is the prediction horizon.
      batch_size: 2000
      vx_std: 0.2
      vy_std: 0.2
      wz_std: 0.4
      vx_max: 0.5  #Target maximum forward velocity (m/s).
      vx_min: -0.35 #Maximum reverse velocity (m/s).
      vy_max: 0.0  #Target maximum lateral velocity, if using Omni motion model (m/s).
      vy_min: 0.0
      wz_max: 0.3 #Maximum rotational velocity (rad/s).
      ax_max: 1.0
      ax_min: -1.0
      ay_max: 0.0
      ay_min: 0.0
      az_max: 0.6  #Maximum angular acceleration (rad/s^2).
      publish_optimal_trajectory: true  #Whether to publish the optimal trajectory (pose, velocity, timestamps of via points) computed by MPC for visualization, debugging, or injection by lower-level control systems and/or collision avoidance systems that need awarenes of future velocity commands and/or poses.
      iteration_count: 1
      prune_distance: 1.7  #Distance ahead of nearest point on path to robot to prune path to (m).
      transform_tolerance: 0.5  #Time tolerance for data transformations with TF (s).
      # max_robot_pose_search_dist: 
      temperature: 0.3
      gamma: 0.015
      motion_model: "DiffDrive"
      visualize: true
      reset_period: 1.0 # (only in Humble)
      regenerate_noises: false
      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3
      AckermannConstraints:
        min_turning_r: 0.2
      critics: ["ObstaclesCritic", "ConstraintCritic", "CostCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 10.0
        threshold_to_consider: 1.4
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 1.0
        threshold_to_consider: 0.5
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 10.0
        threshold_to_consider: 0.5
      ObstaclesCritic:
        enabled: true
        cost_power: 1
        repulsion_weight: 1.5
        critical_weight: 20.0
        consider_footprint: true
        collision_cost: 10000.0
        collision_margin_distance: 0.1
        near_goal_distance: 0.5
        inflation_radius: 0.35 # (only in Humble)
        cost_scaling_factor: 10.0 # (only in Humble)
      CostCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.81
        critical_cost: 300.0
        consider_footprint: true
        collision_cost: 1000000.0
        near_goal_distance: 1.0
        trajectory_point_step: 2
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 14.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 4
        threshold_to_consider: 0.5
        offset_from_furthest: 20
        use_path_orientations: true
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 5
        threshold_to_consider: 1.4
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.5
        max_angle_to_furthest: 1.0
        mode: 0
      VelocityDeadbandCritic:
        enabled: true
        cost_power: 1
        cost_weight: 35.0
        deadband_velocities: [0.1, 0.0, 0.2]
      TwirlingCritic:
        enabled: true
        twirling_cost_power: 1
        twirling_cost_weight: 10.0

    # FollowPath:
    #   plugin: "dwb_core::DWBLocalPlanner"
    #   debug_trajectory_details: True
    #   min_vel_x: -0.3
    #   min_vel_y: 0.0
    #   max_vel_x: 0.5
    #   max_vel_y: 0.0
    #   max_vel_theta: 1.0
    #   min_speed_xy: 0.0
    #   max_speed_xy: 1.0
    #   min_speed_theta: 0.0
    #   acc_lim_x: 1.0
    #   acc_lim_y: 0.0
    #   acc_lim_theta: 1.0
    #   decel_lim_x: -1.0
    #   decel_lim_y: 0.0
    #   decel_lim_theta: -1.0
    #   vx_samples: 20
    #   vy_samples: 5
    #   vtheta_samples: 20
    #   sim_time: 1.7
    #   linear_granularity: 0.05
    #   angular_granularity: 0.025
    #   transform_tolerance: 0.2
    #   xy_goal_tolerance: 0.2
    #   trans_stopped_velocity: 0.25
    #   short_circuit_trajectory_evaluation: True
    #   stateful: True
    #   critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
    #   BaseObstacle.scale: 0.02
    #   PathAlign.scale: 32.0
    #   PathAlign.forward_point_distance: 0.1
    #   GoalAlign.scale: 24.0
    #   GoalAlign.forward_point_distance: 0.1
    #   PathDist.scale: 32.0
    #   GoalDist.scale: 24.0
    #   RotateToGoal.scale: 32.0
    #   RotateToGoal.slowing_factor: 12.0
    #   RotateToGoal.lookahead_time: 2.0

    # FollowPath:
    #   plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
    #   desired_linear_vel: 0.5
    #   lookahead_dist: 0.6
    #   min_lookahead_dist: 0.3
    #   max_lookahead_dist: 0.9
    #   lookahead_time: 1.5
    #   rotate_to_heading_angular_vel: 0.5
    #   transform_tolerance: 0.1
    #   use_velocity_scaled_lookahead_dist: false
    #   min_approach_linear_velocity: 0.05
    #   approach_velocity_scaling_dist: 1.0
    #   use_collision_detection: true
    #   max_allowed_time_to_collision_up_to_carrot: 1.0
    #   use_regulated_linear_velocity_scaling: true
    #   use_cost_regulated_linear_velocity_scaling: false
    #   regulated_linear_scaling_min_radius: 0.9
    #   regulated_linear_scaling_min_speed: 0.25
    #   use_fixed_curvature_lookahead: false
    #   curvature_lookahead_dist: 1.0
    #   use_rotate_to_heading: false
    #   rotate_to_heading_min_angle: 0.785
    #   max_angular_accel: 1.0
    #   max_robot_pose_search_dist: 10.0
    #   interpolate_curvature_after_goal: false
    #   cost_scaling_dist: 0.3
    #   cost_scaling_gain: 1.0
    #   inflation_cost_scaling_factor: 3.0



controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: false





local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      footprint_padding: 0.05
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: false
      rolling_window: True
      width: 10
      height: 10
      resolution: 0.05
      transform_tolerance: 1.0  #[INFO] [1756223852.774499982] [j100_0921.local_costmap.local_costmap]: Message Filter dropping message: frame 'camera_0_left_camera_frame' at time 1756223852.219 for reason 'the timestamp on the message is earlier than all the data in the transform cache'
      # footprint: "[ [0.14, 0.25], [0.14, -0.25], [-0.607, -0.25], [-0.607, 0.25] ]"
      footprint: "[ [0.254, 0.2159], [0.254, -0.2159], [-0.254, -0.2159], [-0.254, 0.2159] ]"
      # plugins: ["hesai_voxel_layer", "front_rplidar_obstacle_layer", "back_rplidar_obstacle_layer", "inflation_layer"]
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: True
        cost_scaling_factor: 4.0
        inflation_radius: 0.35
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True ########
        footprint_clearing_enabled: true
        max_obstacle_height: 1.0
        publish_voxel_map: true
        origin_z: 0.0
        z_voxels: 10
        z_resolution: 0.2
        unknown_threshold: 15
        observation_sources: pointcloud
        pointcloud:  # no frame set, uses frame from message
          topic: <robot_namespace>/sensors/camera_0/stereolabs_zed/point_cloud/cloud_registered
          max_obstacle_height: 2.0
          min_obstacle_height: 0.2
          obstacle_max_range: 5.0
          obstacle_min_range: 0.0
          raytrace_max_range: 5.0
          raytrace_min_range: 0.7
          clearing: True
          marking: True
          data_type: "PointCloud2"
  local_costmap_client:
    ros__parameters:
      use_sim_time: false
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: false


#  [j100_0921.global_costmap.global_costmap]: The configured inflation radius (0.200) is smaller than the computed inscribed radius (0.316) of your footprint, it is highly recommended to set inflation radius to be at least as big as the inscribed radius to avoid collisions

global_costmap:
  global_costmap:
    ros__parameters:
      transform_tolerance: 0.2
      footprint_padding: 0.05
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: false
      # footprint: "[ [0.14, 0.25], [0.14, -0.25], [-0.607, -0.25], [-0.607, 0.25] ]"
      footprint: "[ [0.254, 0.2159], [0.254, -0.2159], [-0.254, -0.2159], [-0.254, 0.2159] ]"      
      # rolling_window: True
      # width: 200
      # height: 200
      resolution: 0.05
      track_unkown_space: true
      # origin_x: -100.0
      # origin_y: -100.0
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: pointcloud
        scan:
          topic: <robot_namespace>/sensors/camera_0/point_cloud/cloud_registered
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "PointCloud2"
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
          obstacle_max_range: 5.0
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 0.9
        inflation_radius: 0.45
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: false
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: false

# The yaml_filename does not need to be specified since it going to be set by defaults in launch.
# If you'd rather set it in the yaml, remove the default "map" value in the tb3_simulation_launch.py
# file & provide full path to map below. If CLI map configuration or launch default is provided, that will be used.
# map_server:
#   ros__parameters:
#     yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: false
    yaml_filename: ""    
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True
    
# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 20.0
#     use_sim_time: False
#     planner_plugins: ["GridBased"]
#     GridBased:
#       plugin: "nav2_navfn_planner/NavfnPlanner"
#       tolerance: 0.5
#       use_astar: false
#       allow_unknown: true

planner_server:
  ros__parameters:
    expected_planner_frequency: 10.0
    use_sim_time: false
    planner_plugins: ["GridBased"]
    # GridBased:
    #   plugin: "nav2_navfn_planner/NavfnPlanner"
    #   tolerance: 0.5
    #   use_astar: false
    #   allow_unknown: true
    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      # plugin: "nav2_smac_planner::SmacPlannerHybrid"
      tolerance: 0.5                      # tolerance for planning if unable to reach exact pose, in meters
      downsample_costmap: false           # whether or not to downsample the map
      downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: false                # allow traveling in unknown space
      max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000    # maximum number of iterations to attempt to reach goal once in tolerance
      terminal_checking_interval: 5000     # number of iterations between checking if the goal has been cancelled or planner timed out
      max_planning_time: 3.5              # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      motion_model_for_search:  "REEDS_SHEPP"    # For Hybrid DUBIN, REEDS_SHEPP
      cost_travel_multiplier: 4.0         # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      angle_quantization_bins: 64         # For Hybrid nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
      analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0    # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
      analytic_expansion_max_cost: 200   # For Hybrid/Lattice nodes: The maximum single cost for any part of an analytic expansion to contain and be valid (except when necessary on approach to goal)
      analytic_expansion_max_cost_override: false # For Hybrid/Lattice nodes: Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required). If expansion is within 2*pi*min_r of the goal, then it will override the max cost if ``false``.
      minimum_turning_radius: 0.2      # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
      reverse_penalty: 1.2                # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.0                 # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
      non_straight_penalty: 1.20          # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 2.0                   # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      retrospective_penalty: 0.025        # For Hybrid/Lattice nodes: penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0
      rotation_penalty: 5.0               # For Lattice node: Penalty to apply only to pure rotate in place commands when using minimum control sets containing rotate in place primitives. This should always be set sufficiently high to weight against this action unless strictly necessary for obstacle avoidance or there may be frequent discontinuities in the plan where it requests the robot to rotate in place to short-cut an otherwise smooth path for marginal path distance savings.
      lookup_table_size: 20.0               # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: True      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsequent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      allow_reverse_expansion: False      # For Lattice nodes: Whether to expand state lattice graph in forward primitives or reverse as well, will double the branching factor at each step.
      smooth_path: True                   # For Lattice/Hybrid nodes: Whether or not to smooth the path, always true for 2D nodes.
      debug_visualizations: True                # For Hybrid/Lattice nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1.0e-10
        do_refinement: true               # Whether to recursively run the smoother 3 times on the results from prior runs to refine the results further


planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: false


smoother_server:
  ros__parameters:
    use_sim_time: false
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    use_sim_time: false
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_link
    transform_tolerance: 0.5
    simulate_ahead_time: 3.0
    max_rotational_vel: 0.3
    min_rotational_vel: 0.2
    rotational_acc_lim: 0.5

# robot_state_publisher:
#   ros__parameters:
#     use_sim_time: false

waypoint_follower:
  ros__parameters:
    use_sim_time: false
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: False
      waypoint_pause_duration: 200


#https://docs.nav2.org/configuration/packages/configuring-velocity-smoother.html
velocity_smoother: 
  ros__parameters: 
    use_realtime_priority: true #Adds soft real-time prioritization to the controller server to better ensure resources to time sensitive portions of the codebase. This will set the controllerâ€™s execution thread to a higher priority than the rest of the system (90) to meet scheduling deadlines to have less missed loop rates. To use this feature, you use set the following inside of /etc/security/limits.conf to give userspace access to elevated prioritization permissions: <username> soft rtprio 99 <username> hard rtprio 99
    use_sim_time: false
    smoothing_frequency: 20.0 
    scale_velocities: false 
    feedback: "OPEN_LOOP" 
    max_velocity: [0.7, 0.0, 0.6] 
    min_velocity: [-0.7, 0.0, -0.6] 
    deadband_velocity: [0.1, 0.0, 0.2] 
    max_accel: [0.3, 0.0, 0.5] 
    max_decel: [-0.5, 0.0, -0.5] 
    odom_topic: "<robot_namespace>/odom_converted"  #Topic to find robot odometry, if in CLOSED_LOOP operational mode.
    odom_duration: 0.1  #Time (s) to buffer odometry commands to estimate the robot speed, if in CLOSED_LOOP operational mode.
    velocity_timeout: 1.0 


# docking_server:
#   ros__parameters:
#     controller_frequency: 30.0
#     initial_perception_timeout: 5.0
#     wait_charge_timeout: 5.0
#     dock_approach_timeout: 30.0
#     undock_linear_tolerance: 0.05
#     undock_angular_tolerance: 0.1
#     max_retries: 3
#     base_frame: base_link
#     fixed_frame: odom
#     dock_backwards: false
#     dock_prestaging_tolerance: 0.5

#     # Types of docks
#     dock_plugins: ['husky_dock']
#     husky_dock:
#       plugin: 'opennav_docking::SimpleChargingDock'
#       docking_threshold: 0.05
#       staging_x_offset: -0.7
#       use_external_detection_pose: true
#       use_battery_status: true
#       use_stall_detection: false

#       external_detection_timeout: 1.0
#       external_detection_translation_x: -0.18
#       external_detection_translation_y: 0.0
#       external_detection_rotation_roll: -1.57
#       external_detection_rotation_pitch: -1.57
#       external_detection_rotation_yaw: 0.0
#       filter_coef: 0.1
    
#     docks: ['charging_1', 'unloading_1']
#     charging_1:
#       type: "husky_dock"
#       frame: map
#       pose: [-0.13212, 6.39545, -1.57]
#     unloading_1:
#       type: "husky_dock"
#       frame: map
#       pose: [3.88763, 6.38881, -1.57]

#     # Sep. file of dock instances so config file can be used in multiple locations
#     # this param will be overridden by the one in the launch file
#     # dock_database: husky_nav_bringup/config/husky_dock_database.yaml

#     controller:
#       k_phi: 3.0
#       k_delta: 2.0
#       v_linear_min: 0.15
#       v_linear_max: 0.15